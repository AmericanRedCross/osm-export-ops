---

- name: create application user(s) and group(s)
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
    - name: groupadd 'dev' for g+rw perms on files
      group:
        name: "{{ item.group_name }}"
        state: present
      with_items: "{{ users_and_groups }}"

    - name: useradd
      user:
        name: "{{ item.user_name }}"
        generate_ssh_key: yes
        shell: /bin/bash
        createhome: yes
        home: "/home/{{ item.user_name }}"
        group: "{{ item.group_name }}"
        state: present
      with_items: "{{ users_and_groups }}"

    - name: add umask to /home/<user>/.profile for g+rw perms on files
      lineinfile:
          dest: "/home/{{ app_user.user_name }}/.profile"
          state: present
          regexp: '^umask 002$'
          insertafter: '# for ssh logins, install and configure the libpam-umask package.'
          line: 'umask 002'

#    - name: create the SSH public key file
#      copy: content="{{ git_ssh_public_key }}"
#            dest="/home/{{ app_user.user_name }}/.ssh/id_rsa.pub"
#            mode=0644
#      become: yes
#      become_user: "{{ app_user.user_name }}"
#
#    - name: create the SSH private key file
#      copy: content="{{ git_ssh_private_key }}"
#            dest="/home/{{ app_user.user_name }}/.ssh/id_rsa"
#            mode=0600
#      become: yes
#      become_user: "{{ app_user.user_name }}"

- name: install base dependencies
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - base_debian_dependencies

- name: install base python dependencies
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - python

- name: install postgresql, postgis and postgresql-common, contrib
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - postgres

- name: osm_export_tool project setup
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: create project home if it doesn't exist
    file:
      dest: "{{ project_home }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0774
    become: yes
    become_user: "{{ app_user.user_name }}"

  - name: create empty 'hotosm' virtualenv in project home
    pip:
#      virtualenv_command: /usr/bin/virtualenv
#      virtualenv: "{{ virtualenv_dir }}"
      virtualenv_site_packages: yes # include site packages
      name: ""
#    become: yes
#    become_user: "{{ app_user.user_name }}"

#  - name: .bashrc should activate virtual environment when we change to that user
#    lineinfile:
#      dest: "/home/{{ app_user.user_name }}/.bashrc"
#      regexp: "^source {{ virtualenv_dir }}/bin/activate; cd {{ project_home }}/{{ repo_name }};"
#      insertafter: "^# User specific aliases and functions"
#      line: "source {{ virtualenv_dir }}/bin/activate; cd {{ project_home }}/{{ repo_name }};"
#    become: yes
#    become_user: "{{ app_user.user_name }}"

  - name: create osm_export_tool DB
    postgresql_db:
      name: "{{ db_name }}"
      encoding: 'UTF-8'
      lc_collate: 'C.UTF-8'
      lc_ctype: 'C.UTF-8'
      template: 'template0'

  - name: add POSTGIS extension to the created db
    postgresql_ext:
      name: postgis
      db: "{{ db_name }}"

  - name: add HSTORE extension to the created db
    postgresql_ext:
      name: hstore
      db: "{{ db_name }}"

  - name: create osm_export_tool postgresql superuser/role
    postgresql_user:
      db: "{{ db_name }}"
      name: "{{ db_user }}"
      password: "{{ db_password }}"

  - name: psql check schema 'exports'
    command: psql -t -d "{{ db_name }}" -c "SELECT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'exports');"
    register: check_schema
    changed_when: "'f' in '{{ check_schema.stdout }}'"
    become: yes
    become_user: postgres
#  - debug: var=check_schema

  - name: psql schema 'exports'
    command: psql -d "{{ db_name }}" -c "CREATE SCHEMA exports AUTHORIZATION {{ db_user }}; ALTER USER {{ db_user }} SET search_path TO exports, public;"
    when: check_schema.changed
    become: yes
    become_user: postgres

  - name: setup GIS apt repository
    apt_repository:
      repo: 'ppa:ubuntugis/ubuntugis-unstable'
      state: present
      update_cache: yes

  - name: install GDAL packages
    apt:
      name: gdal-bin,libgdal-dev,python-gdal
      state: present

  - name: install thirdparty dependency packages
    apt:
      name: osmctools,spatialite-bin,libspatialite5,libspatialite-dev,default-jre,zip,unzip
      state: present

  - name: create the thirdparty directory
    file:
      dest: "{{ thirdparty_dir }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777

  - name: create the exdir(s) for zipfiles
    file:
      dest: "{{ item.exdir }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
    with_items: "{{ thirdparty_zipfiles }}"

    # drop to shell here because 'get_url' and 'unarchive' are slow
#  - name: download the thirdparty zips
#    local_action:
#    module: "shell wget -q {{ item.url }} -O {{ item.exdir }}"
#    with_items: "{{ thirdparty_zipfiles }}"
#    become: yes
#    become_user: "{{ app_user.user_name }}"

  - name: download the thirdparty zips
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.exdir }}/{{ item.url | basename }}"
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
      force: no # make sure it doesn't do a download if dest exists
    with_items: "{{ thirdparty_zipfiles }}"

  - name: unarchive the thirdparty zips
    unarchive:
      creates: "{{ item.exdir }}/exists.txt" # determines if this should run
      src: "{{ item.exdir }}/{{ item.url | basename }}"
      dest: "{{ item.exdir }}"
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
      copy: no
    with_items: "{{ thirdparty_zipfiles }}"

  - name: create export(s) dirs
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
    with_items:
      - "{{ exports_staging_dir }}"
      - "{{ exports_media_dir }}"
      - "{{ exports_download_dir }}"
    become: yes
    become_user: "{{ app_user.user_name }}"

- name: install rabbitmq
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - rabbitmq

- name: osm_export_tool checkout and virtualenv & pip install
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
    - name: apt get dependecies that aren't listed in osm-export-tool2 docs
      apt:
        name: libxml2-dev,libxml2,libxslt1-dev,libxslt1.1
        state: present

    - name: clone the osm-export-tools2 repository
      git:
        accept_hostkey: yes
        repo: "{{ git_repo_url }}"
        dest: "{{ project_home }}/{{ repo_name }}"
        clone: yes
        update: yes
        force: yes
      become: yes
      become_user: "{{ app_user.user_name }}"

    - debug: msg="{{ lookup( 'env', 'C_INCLUDE_PATH' ) }}"
    - name: pip install the requirements
      pip:
#        virtualenv_command: /usr/bin/virtualenv
#        virtualenv: "{{ virtualenv_dir }}"
#        virtualenv_site_packages: yes
        requirements: "{{ requirements_file }}"
#      become: yes
#      become_user: "{{ app_user.user_name }}"

    - name: create settings file
      template:
        src: "templates/osmexporttool/dev_dodobas.py.j2"
        dest: "{{ settings_dest }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0774
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: add DJANGO_SETTINGS_MODULE to .bashrc
      lineinfile:
        dest: "/home/{{ app_user.user_name }}/.bashrc"
        regexp: "^export DJANGO_SETTINGS_MODULE=core.settings.{{ settings_dest | basename | regex_replace('.py', '') }};cd {{ project_home }}/{{ repo_name }};"
        insertafter: "^# User specific aliases and functions"
        line: "export DJANGO_SETTINGS_MODULE=core.settings.{{ settings_dest | basename | regex_replace('.py', '') }};cd {{ project_home }}/{{ repo_name }};"
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: create garmin.conf.xml and overrite the current one
      template:
        src: "templates/osmexporttool/garmin_config.xml.j2"
        dest: "{{ garmin_xml_dest }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0774
      become: yes
      become_user: "{{ app_user.user_name }}"

- name: install OverpassAPI
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
    - name: install apt package dependencies
      apt:
        name: g++,make,expat,libexpat1-dev,zlib1g-dev
        state: present

    - name: create overpassapi tar dir for extraction
      file:
        dest: "{{ overpass_api_dir }}"
        state: directory
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0777

    - name: get the overpassapi tar
      get_url:
        url: "{{ overpass_latest_tar }}"
        dest: "{{ overpass_api_dir }}/{{ overpass_latest_tar | basename }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0777
        force: no # make sure it doesn't do a download if dest exists

    - name: unarchive the tar
      unarchive:
        creates: "{{ overpass_api_dir }}/exists.txt" # determines if this should run
        src: "{{ overpass_api_dir }}/{{ overpass_latest_tar | basename }}"
        dest: "{{ overpass_api_dir }}/"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0777
        copy: no

    - name: create all overpassapi dirs
      file:
        dest: "{{ item }}"
        state: directory
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0777
      with_items:
        - "{{ overpass_exec_dir }}"
        - "{{ overpass_db_dir }}"
        - "{{ overpass_planet_dir }}"
        - "{{ overpass_replicate_dir }}"

    - name: .configure/ overpassapi tool
      shell: "./configure CXXFLAGS=\"-O3\" --prefix={{ overpass_exec_dir }} chdir={{ overpass_api_dir }}/{{ overpass_latest_tar | basename | regex_replace('.tar.gz','') }}"
      register: config_output
#    - debug: msg="{{ config_output.stdout_lines }}"

    - name: make install overpassapi tool
      shell: "make install chdir={{ overpass_api_dir }}/{{ overpass_latest_tar | basename | regex_replace('.tar.gz','') }}"
      register: make_output
#    - debug: msg="{{ make_output.stdout_lines }}"

    - name: download the 'planet.pbf' file that is specified in the config
      get_url:
        url: "{{ planet_osm_download_url }}"
        dest: "{{ overpass_planet_dir }}/{{ planet_filename }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0777
        force: no # make sure it doesn't do a download if dest exists
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: add overpassapi scripts to PATH for .bashrc
      lineinfile:
        dest: "/home/{{ app_user.user_name }}/.bashrc"
        regexp: "^export PATH=$PATH:{{ overpass_exec_dir }}/bin;"
        insertafter: "^export DJANGO_SETTINGS_MODULE=core.settings.{{ settings_dest | basename | regex_replace('.py', '') }};cd {{ project_home }}/{{ repo_name }};"
        line: "export PATH=$PATH:{{ overpass_exec_dir }}/bin;"

      # setting the PATH environment var doesn't seem to work for this
    - name: run `osmconvert` to load the OSM database
      shell: ". /home/{{ app_user.user_name }}/.bashrc && osmconvert --out-osm {{ overpass_planet_dir }}/{{ planet_filename }} | {{ overpass_exec_dir }}/bin/update_database --meta --db-dir={{ overpass_db_dir }} --flush-size=1"
      register: osmconvert_output
    - debug: msg="{{ osmconvert_output.stdout_lines }}"

    - name: install the overpassapi systemd script
      template:
        src: templates/osmexporttool/overpassapi.service.j2
        dest: /etc/init/overpassapi.conf
        owner: root
        group: root
        mode: 0777
      notify: restart overpassapi

    - name: install apache2 httpd
      apt:
        name: apache2

    - name: enable mod.cgi
      apache2_module: state=present name=cgi

    - name: enable mod.ext_filter
      apache2_module: state=present name=ext_filter

    - name: add the virtual host to /etc/apache2/sites-available
      template:
        src: templates/osmexporttool/overpassapi.apache2.conf.j2
        dest: /etc/apache2/sites-available/overpassapi.conf
        owner: root
        group: root
        mode: 0744
      notify: restart apache2

    - name: apt-get install 'screen'
      apt:
        name: 'screen'
        state: present

    - name: run `python manage.py migrate`
      shell: "/usr/bin/python manage.py migrate chdir={{ project_home }}/{{ repo_name }}"

- name: install celery and celerybeat
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - celeryd
