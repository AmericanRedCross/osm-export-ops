---

- name: create application user(s) and group(s)
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
    - name: groupadd 'dev' for g+rw perms on files
      group:
        name: "{{ item.group_name }}"
        state: present
      with_items: "{{ users_and_groups }}"

    - name: useradd
      user:
        name: "{{ item.user_name }}"
        generate_ssh_key: yes
        shell: /bin/bash
        createhome: yes
        home: "/home/{{ item.user_name }}"
        group: "{{ item.group_name }}"
        state: present
      with_items: "{{ users_and_groups }}"

    - name: add umask to /home/<user>/.profile for g+rw perms on files
      lineinfile:
          dest: "/home/{{ app_user.user_name }}/.profile"
          state: present
          regexp: '^umask 002$'
          insertafter: '# for ssh logins, install and configure the libpam-umask package.'
          line: 'umask 002'

#    - name: create the SSH public key file
#      copy: content="{{ git_ssh_public_key }}"
#            dest="/home/{{ app_user.user_name }}/.ssh/id_rsa.pub"
#            mode=0644
#      become: yes
#      become_user: "{{ app_user.user_name }}"
#
#    - name: create the SSH private key file
#      copy: content="{{ git_ssh_private_key }}"
#            dest="/home/{{ app_user.user_name }}/.ssh/id_rsa"
#            mode=0600
#      become: yes
#      become_user: "{{ app_user.user_name }}"

- name: install base dependencies
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - base_debian_dependencies

- name: install base python dependencies
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - python

- name: install postgresql, postgis and postgresql-common, contrib
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - postgres

- name: osm_export_tool project setup
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: create project home if it doesn't exist
    file:
      dest: "{{ project_home }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0774
    become: yes
    become_user: "{{ app_user.user_name }}"

  - name: create empty 'hotosm' virtualenv in project home
    pip:
      virtualenv_command: /usr/bin/virtualenv
      virtualenv: "{{ virtualenv_dir }}"
      name: ""
    become: yes
    become_user: "{{ app_user.user_name }}"

  - name: .bashrc should activate virtual environment when we change to that user
    lineinfile:
      dest: "/home/{{ app_user.user_name }}/.bashrc"
      regexp: "^source {{ virtualenv_dir }}/bin/activate; cd /home/{{ app_user.user_name }};"
      insertafter: "^# User specific aliases and functions"
      line: "source {{ virtualenv_dir }}/bin/activate; cd /home/{{ app_user.user_name }};"
    become: yes
    become_user: "{{ app_user.user_name }}"

  - name: create osm_export_tool DB
    postgresql_db:
      name: "{{ db_name }}"
      encoding: 'UTF-8'
      lc_collate: 'C.UTF-8'
      lc_ctype: 'C.UTF-8'
      template: 'template0'

  - name: add POSTGIS extension to the created db
    postgresql_ext:
      name: postgis
      db: "{{ db_name }}"

  - name: add HSTORE extension to the created db
    postgresql_ext:
      name: hstore
      db: "{{ db_name }}"

  - name: create osm_export_tool postgresql superuser/role
    postgresql_user:
      db: "{{ db_name }}"
      name: "{{ db_user }}"
      password: "{{ db_password }}"

  - name: psql check schema 'exports'
    command: psql -t -d "{{ db_name }}" -c "SELECT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'exports');"
    register: check_schema
    changed_when: "'f' in '{{ check_schema.stdout }}'"
    become: yes
    become_user: postgres
#  - debug: var=check_schema

  - name: psql schema 'exports'
    command: psql -d "{{ db_name }}" -c "CREATE SCHEMA exports AUTHORIZATION {{ db_user }}; ALTER USER {{ db_user }} SET search_path TO exports, public;"
    when: check_schema.changed
    become: yes
    become_user: postgres

  - name: setup GIS apt repository
    apt_repository:
      repo: 'ppa:ubuntugis/ubuntugis-unstable'
      state: present
      update_cache: yes

  - name: install GDAL packages
    apt:
      name: gdal-bin,libgdal-dev
      state: present

  - name: write out GDAL environment variables to ./bashrc/
    lineinfile:
      dest: "/home/{{ app_user.user_name }}/.bashrc"
      regexp: "^export CPLUS_INCLUDE_PATH=/usr/include/gdal;export C_INCLUDE_PATH=/usr/include/gdal;"
      insertafter: "^source {{ virtualenv_dir }}/bin/activate; cd /home/{{ app_user.user_name }};"
      line: "export CPLUS_INCLUDE_PATH=/usr/include/gdal;export C_INCLUDE_PATH=/usr/include/gdal;"
    become: yes
    become_user: "{{ app_user.user_name }}"

  - name: install thirdparty dependency packages
    apt:
      name: osmctools,spatialite-bin,libspatialite5,libspatialite-dev,default-jre,zip,unzip
      state: present

  - name: create the thirdparty directory
    file:
      dest: "{{ thirdparty_dir }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777

  - name: create the exdir(s) for zipfiles
    file:
      dest: "{{ item.exdir }}"
      state: directory
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
    with_items: "{{ thirdparty_zipfiles }}"

  - name: download the thirdparty zips
    unarchive:
      creates: "{{ item.exdir }}/exists.txt" # determines if this should run
      src: "{{ item.url }}"
      dest: "{{ item.exdir }}"
      owner: "{{ app_user.user_name }}"
      group: "{{ app_user.group_name }}"
      mode: 0777
      copy: no
    with_items: "{{ thirdparty_zipfiles }}"

- name: install rabbitmq
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - rabbitmq

- name: osm_export_tool project setup2
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
    - name: clone the osm-export-tools2 repository
      git:
        accept_hostkey: yes
        repo: "https://github.com/hotosm/osm-export-tool2.git"
        dest: "{{ project_home }}"
        clone: yes
        update: yes
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: pip install the requirements
      pip:
        virtualenv_command: /usr/bin/virtualenv
        virtualenv: "{{ virtualenv_dir }}"
        requirements: "{{ requirements_file }}"
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: create export(s) dirs
      file:
        dest: "{{ item.exdir }}"
        state: directory
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0777
      with_items:
        - "{{ exports_staging_dir }}"
        - "{{ exports_media_dir }}"
        - "{{ exports_download_dir }}"
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: create settings file
      template:
        src: "{{ templates }}/osmexporttool/dev_dodobas.py.j2"
        dest: "{{ settings_dest }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0774
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: add DJANGO_SETTINGS_MODULE to .bashrc
      lineinfile:
        dest: "/home/{{ app_user.user_name }}/.bashrc"
        regexp: "^export DJANGO_SETTINGS_MODULE={{ repo_name }}.core.{{ settings_dest | basename }};"
        insertafter: "^export CPLUS_INCLUDE_PATH=/usr/include/gdal;export C_INCLUDE_PATH=/usr/include/gdal;"
        line: "^export DJANGO_SETTINGS_MODULE={{ repo_name }}.core.{{ settings_dest | basename }};"
      become: yes
      become_user: "{{ app_user.user_name }}"

    - name: creat garmin.conf.xml and overrite the current one
      template:
        src: "{{ templates }}/osmexporttool/garmin_config.xml.j2"
        dest: "{{ garmin_xml_dest }}"
        owner: "{{ app_user.user_name }}"
        group: "{{ app_user.group_name }}"
        mode: 0774
      become: yes
      become_user: "{{ app_user.user_name }}"


#- name: install OverpassAPI
#  hosts: all
#  gather_facts: no
#  become: yes # sudo
#  roles:
#    - rabbitmq


     # review where config is at
#  - name: install celery and celerybeat
#    hosts: all
#    gather_facts: no
#    sudo: yes
#    roles:
#      - celeryd
