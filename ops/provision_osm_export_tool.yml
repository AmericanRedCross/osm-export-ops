---

- name: install build-essential and build tools
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: install build-essential and build tools
    apt:
      name: build-essential,git
      install_recommends: no
      state: present
      update_cache: yes

- name: install base python dependencies
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: install python dependencies
    apt:
      name: python-dev,python-pip
      install_recommends: no
      state: present

- name: install postgresql, postgis and postgresql-common, contrib
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - postgres

- name: install rabbitmq
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - rabbitmq

- name: install nginx
  hosts: all
  gather_facts: no
  become: yes # sudo
  roles:
    - nginx

- name: install Node.js packages
  hosts: all
  gather_facts: yes
  become: yes # sudo
  tasks:
  - name: get nodejs apt key
    apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key state=present

  - name: add-apt repository
    apt_repository: repo='deb https://deb.nodesource.com/node_{{ node_version }}.x {{ ansible_distribution_release }} main' state=present update_cache=yes

  - name: install nodejs
    apt:
     name: nodejs
     install_recommends: no

  - name: install 'tl'
    npm: name=tl global=yes
    ignore_errors: yes

  - name: install 'tilelive-http'
    npm: name=tilelive-http global=yes

  - name: install 'tilejson'
    npm: name=tilejson global=yes

  - name: install 'mbtiles'
    npm: name=mbtiles global=yes


- name: install celery and celerybeat
  hosts: all
  gather_facts: no
  become: yes # sudo
  handlers:
    - name: restart celery
      become: yes
      service: name=celery state=restarted enabled=yes

    - name: restart celerybeat
      become: yes
      service: name=celerybeat state=restarted enabled=yes
  tasks:
  - name: install celery
    pip:
      name: celery
      state: present

  - name: install the 'celery' upstart script
    template:
      src: templates/osmexporttool/celery.upstart.conf.j2
      dest: /etc/init/celery.conf
      owner: root
      group: root
      mode: 0644
    notify: restart celery

  - name: install the 'celerybeat' upstart script
    template:
      src: templates/osmexporttool/celerybeat.upstart.conf.j2
      dest: /etc/init/celerybeat.conf
      owner: root
      group: root
      mode: 0644
    notify: restart celerybeat

- name: osm_export_tool project setup
  hosts: all
  gather_facts: no
  become: yes # sudo
  tasks:
  - name: create project home if it doesn't exist
    file:
      dest: "{{ project_home }}"
      state: directory
      owner: "{{ ansible_user }}"

  - name: create osm_export_tool DB
    postgresql_db:
      name: "{{ db_name }}"
      login_user: "postgres"

  - name: add POSTGIS extension to the created db
    postgresql_ext:
      name: postgis
      db: "{{ db_name }}"

  - name: add HSTORE extension to the created db
    postgresql_ext:
      name: hstore
      db: "{{ db_name }}"

  - name: create osm_export_tool postgresql superuser/role
    postgresql_user:
      db: "{{ db_name }}"
      name: "{{ db_user }}"
      password: "{{ db_password }}"
  - debug: msg="DB_PASSWORD = {{ db_password }}"

  - name: setup GIS apt repository
    apt_repository:
      repo: 'ppa:ubuntugis/ubuntugis-unstable'
      state: present
      update_cache: yes

  - name: install GDAL packages
    apt:
      name: gdal-bin,python-gdal
      state: present

  - name: install thirdparty dependency packages
    apt:
      name: osmctools,spatialite-bin,libspatialite5,libspatialite-dev,default-jre,zip,unzip
      state: present

  - name: create the thirdparty directory
    file:
      dest: "{{ thirdparty_dir }}"
      state: directory
      owner: "{{ ansible_user }}"

  - name: create the exdir(s) for zipfiles
    file:
      dest: "{{ item.exdir }}"
      state: directory
      owner: "{{ ansible_user }}"
    with_items: "{{ thirdparty_zipfiles }}"

  - name: download the thirdparty zips
    get_url:
      url: "{{ item.url }}"
      dest: "{{ item.exdir }}/{{ item.url | basename }}"
      owner: "{{ ansible_user }}"
      force: no # make sure it doesn't do a download if dest exists
    with_items: "{{ thirdparty_zipfiles }}"

  - name: unarchive the thirdparty zips
    unarchive:
      creates: "{{ item.exdir }}/exists.txt" # determines if this should run
      src: "{{ item.exdir }}/{{ item.url | basename }}"
      dest: "{{ item.exdir }}"
      owner: "{{ ansible_user }}"
      copy: no
    with_items: "{{ thirdparty_zipfiles }}"

  - name: create export(s) dirs
    file:
      dest: "{{ item }}"
      state: directory
      owner: "{{ ansible_user }}"
    with_items:
      - "{{ exports_staging_dir }}"
      - "{{ exports_download_dir }}"

- name: osm_export_tool checkout and pip install
  hosts: all
  gather_facts: no
  environment:
    DJANGO_SETTINGS_MODULE: "{{ django_settings_mod_path }}"
  handlers:
    - name: restart nginx
      become: yes
      service: name=nginx state=restarted

    - name: restart gunicorn
      become: yes
      service: name=osm-export-tool2 state=restarted enabled=yes
      notify:
        - restart celery
        - restart celerybeat

    - name: restart celery
      become: yes
      service: name=celery state=restarted enabled=yes

    - name: restart celerybeat
      become: yes
      service: name=celerybeat state=restarted enabled=yes
  tasks:
    - name: clone the osm-export-tool2 repository
      git:
        accept_hostkey: yes
        repo: "{{ git_repo_url }}"
        version: "{{ git_repo_branch }}"
        dest: "{{ project_root }}"
        clone: yes
        update: yes
        force: yes
      notify: restart gunicorn

    - name: create project /static/ if it doesn't exist
      file:
        dest: "{{ project_static_dir }}"
        state: directory

    - name: install Python requirements from apt
      become: yes
      apt:
        name: python-lxml,python-openid
        state: present

    - name: pip install the requirements
      become: yes
      pip:
        requirements: "{{ requirements_file }}"

    - name: pip install 'gunicorn'
      become: yes
      pip: name=gunicorn

    - name: install the osm-export-tool2 'gunicorn' upstart script
      become: yes
      template:
        src: templates/osmexporttool/gunicorn.upstart.conf.j2
        dest: /etc/init/osm-export-tool2.conf
        owner: root
        group: root
        mode: 0644
      notify: restart gunicorn

    - name: deactivate the default 'nginx' site
      become: yes
      file: path=/etc/nginx/sites-enabled/default
            state=absent
      notify: restart nginx

    - name: install the osm-export-tool2 'nginx' into sites-available
      become: yes
      template:
        src: templates/osmexporttool/exports.nginx.j2
        dest: /etc/nginx/sites-available/exports
        owner: root
        group: root
        mode: 0644
      notify: restart nginx

    - name: activate osm-export-tool2 'nginx' site
      become: yes
      file: src=/etc/nginx/sites-available/exports
            dest=/etc/nginx/sites-enabled/exports
            state=link
      notify: restart nginx

    - name: create settings file
      template:
        src: "templates/osmexporttool/site.settings.py.j2"
        dest: "{{ settings_dest }}"
        owner: "{{ ansible_user }}"
      notify: restart gunicorn

    - name: create garmin.conf.xml and overrite the current one
      template:
        src: "templates/osmexporttool/garmin_config.xml.j2"
        dest: "{{ garmin_xml_dest }}"
        owner: "{{ ansible_user }}"

    - name: run 'python manage.py migrate'
      django_manage:
        command: migrate
        app_path: "{{ project_root }}"
        settings: "{{ django_settings_mod_path }}"
      notify: restart gunicorn

    - name: run 'python manage.py collectstatic'
      django_manage:
        command: collectstatic
        app_path: "{{ project_root }}"
        settings: "{{ django_settings_mod_path }}"
      notify: restart gunicorn

    - name: install postfix
      become: yes
      apt: package={{ item }} state=installed force=yes update_cache=yes cache_valid_time=3600
      with_items:
        - postfix
